#!/bin/bash

# originally from http://madebynathan.com/2011/10/04/a-nicer-way-to-use-xclip/
#
# A shortcut function that simplifies usage of xclip.
# - Accepts input from either stdin (pipe), or params.
# - If the input is a filename that exists, then it
#   uses the contents of that file.
# ------------------------------------------------

# find the copy application
copy_app=""
if which xclip | grep xclip -q; then
  copy_app="xclip"
elif which pbcopy | grep pbcopy -q; then
  copy_app="pbcopy"
fi

# Check user is not root (root doesn't have access to user xorg server)
if [[ $(whoami) == root ]]; then
  echo "Must be regular user (not root) to copy a file to the clipboard."
else
  # If no tty, data should be available on stdin
  if [ "$( tty )" == 'not a tty' ]; then
    input="$(< /dev/stdin)"
  # Else, fetch input from params
  else
    input="$*"
  fi

  if [ -z "$input" ]; then  # If no input, print usage message.
    echo "Copies a string or the contents of a file to the clipboard."
    echo "Usage: cb <string or file>"
    echo "       echo <string or file> | cb"
  else
    # If the input is a filename that exists, then use the contents of that file.
    if [ -e "$input" ]; then input="$(cat $input)"; fi
    # Copy input to clipboard
    if [ "$copy_app" == "xclip" ]; then
      echo -n "$input" | xclip -selection c
    elif [ "$copy_app" == "pbcopy" ]; then
      echo -n "$input" | pbcopy
    else
      echo "You must have the 'xclip' or 'pbcopy' program installed."
      exit
    fi
    # Truncate text for status
    if [ ${#input} -gt 80 ]; then input="$(echo $input | cut -c1-80)$_trn_col...\e[0m"; fi
    # Print status.
    echo "Copied to clipboard: $input"
  fi
fi
